{"version":3,"sources":["internationalisation/i18n.ts","internationalisation/nonReactTranslation.ts","internationalisation/TranslationContext.tsx","internationalisation/Translate.tsx","App.tsx","index.tsx"],"names":["i18nInit","a","i18n","use","Backend","LanguageDetector","initReactI18next","init","fallbackLng","debug","detection","order","cache","interpolation","escapeValue","react","wait","translateText","showKeys","translationKey","args","t","defaultContext","showLanguageMenu","language","initialised","loading","TranslationContext","React","useTranslation","TranslationProvider","children","setShowKeys","setShowLanguageMenu","setLanguage","setLoading","setInitialised","changeLanguage","lang","then","Array","from","document","querySelectorAll","forEach","element","classList","remove","newlySelected","querySelector","add","setActiveLanguageButton","downHandler","key","window","addEventListener","removeEventListener","Provider","value","type","className","onClick","Translate","props","fallbackText","Trans","i18nKey","defaultProps","InternationalisedTextField","placeholder","useField","field","meta","errorText","error","touched","TextField","helperText","validationSchema","Yup","shape","username","email","required","password","min","App","validateOnChange","initialValues","onSubmit","data","setSubmitting","console","log","values","errors","isSubmitting","name","Button","disabled","color","JSON","stringify","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.4879edf1.chunk.js","sourcesContent":["import i18n from 'i18next';\nimport Backend from 'i18next-http-backend';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport {initReactI18next} from 'react-i18next';\n\nexport const i18nInit = async () => i18n\n.use(Backend)\n.use(LanguageDetector)\n.use(initReactI18next)\n.init({\n  fallbackLng: 'en',\n  debug: true,\n  detection: {\n    order: ['queryString', 'cookie'],\n    cache: ['cookie'],\n  },\n  interpolation: {\n    escapeValue: false,\n  },\n  react: {\n    wait: true,\n },\n});\n\nexport default i18n;\n","import i18n from './i18n';\n\nexport const translateText = (showKeys: boolean, translationKey: string, ...args: any[]): string => {\n  if (!showKeys) {\n    return i18n.t(translationKey, ...args);\n  }\nreturn translationKey;\n};\n","import * as React from 'react';\nimport i18n, {i18nInit} from './i18n';\n\ninterface TranslationSignature {\n  showKeys: boolean;\n  showLanguageMenu: boolean;\n  language: string;\n  initialised: boolean;\n  loading: boolean;\n}\n\nconst defaultContext: TranslationSignature = {\n  showKeys: false,\n  showLanguageMenu: false,\n  language: '',\n  initialised: false,\n  loading: true,\n};\nexport const TranslationContext = React.createContext(defaultContext);\n\nexport function useTranslation() {\n  return React.useContext(TranslationContext);\n}\n\nexport function TranslationProvider({children}: JSX.ElementChildrenAttribute) {\n  const [showKeys, setShowKeys] = React.useState(defaultContext.showKeys);\n  const [showLanguageMenu, setShowLanguageMenu] = React.useState(defaultContext.showLanguageMenu);\n  const [language, setLanguage] = React.useState(defaultContext.language);\n  const [loading, setLoading] = React.useState(defaultContext.loading);\n  const [initialised, setInitialised] = React.useState(defaultContext.initialised);\n\n  const setActiveLanguageButton = (lang: string) => {\n    const selectedButtons = Array.from(document.querySelectorAll('.selected-button'));\n    selectedButtons.forEach((element) => {\n      element.classList.remove('selected-button');\n    });\n    const newlySelected = document.querySelector(`.data-${lang}`);\n    newlySelected && newlySelected.classList.add('selected-button');\n  };\n\n  const changeLanguage = (lang: string) => {\n    setLoading(true);\n    i18n.changeLanguage(lang).then(() => {\n      setLanguage(lang);\n      setActiveLanguageButton(lang);\n      setLoading(false);\n    });\n  };\n\n  const downHandler = ({key}: any) => {\n    if (key === '`') {\n      setShowKeys(!showKeys);\n    }\n    if (key === '~') {\n      setShowLanguageMenu(!showLanguageMenu);\n    }\n  };\n\n  React.useEffect(() => {\n    changeLanguage('en');\n  }, [initialised]);\n\n  if (!initialised) {\n    i18nInit().then(() => {\n      setInitialised(true);\n    });\n  }\n\n  React.useEffect(() => {\n    window.addEventListener('keydown', downHandler);\n    return () => {\n      window.removeEventListener('keydown', downHandler);\n    };\n  });\n\n    return (\n      <TranslationContext.Provider value={{showKeys, showLanguageMenu, language, loading, initialised}}>\n        {initialised && showLanguageMenu && (\n        <div>\n          <button type='button' className='language-menu-button data-en' onClick={() => changeLanguage('en')}>EN</button>\n          <button type='button' className='language-menu-button data-fr' onClick={() => changeLanguage('fr')}>FR</button>\n        </div>\n        )}\n        {children}\n      </TranslationContext.Provider>\n    );\n}\n","import * as React from 'react';\nimport {Trans} from 'react-i18next';\nimport {useTranslation} from './TranslationContext';\n\ninterface TranslationProps {\n    translationKey: string;\n    fallbackText?: string;\n   }\n\nexport const Translate = (props: TranslationProps): JSX.Element => {\n  const {showKeys, loading, initialised} = useTranslation();\n\n  const {fallbackText, translationKey} = props;\n  if (showKeys) {\n      return (\n        <>\n          {translationKey}\n        </>\n      );\n    }\n  return (\n    <>\n      {!loading && initialised && (\n        <Trans i18nKey={translationKey}>\n          {fallbackText}\n        </Trans>\n      )}\n    </>\n  );\n};\n\nTranslate.defaultProps = {\n  fallbackText: '',\n};\n","import {\n  Button,\n  TextField\n} from \"@material-ui/core\";\nimport {\n  FieldAttributes,\n  Form,\n  Formik,\n  useField\n} from \"formik\";\nimport React from \"react\";\nimport * as Yup from \"yup\";\nimport { translateText } from \"./internationalisation/nonReactTranslation\";\nimport { Translate } from \"./internationalisation/Translate\";\nimport { TranslationProvider, useTranslation } from \"./internationalisation/TranslationContext\";\n\nconst InternationalisedTextField: React.FC<FieldAttributes<{}>> = ({\n  placeholder,\n  ...props\n}) => {\n  const { showKeys } = useTranslation();\n  const [field, meta] = useField<{}>(props);\n  const errorText = meta.error && meta.touched ? meta.error : \"\";\n  return (\n    <TextField\n      placeholder={translateText(showKeys, placeholder)}\n      {...field}\n      helperText={translateText(showKeys, errorText)}\n      error={!!errorText}\n    />\n  );\n};\n\nconst validationSchema = Yup.object().shape({\n  username: Yup\n    .string()\n    .email(\"loginPage.invalidEmailError\")\n    .required(\"loginPage.requiredError\"),\n  password: Yup\n    .string()\n    .required('loginPage.requiredError')\n    .min(8, 'loginPage.invalidPasswordError')\n});\n\nconst App: React.FC = () => {\n  return (\n    <TranslationProvider>\n      <div>\n        <Formik\n          validateOnChange={true}\n          initialValues={{\n            username: \"\",\n            password: \"\",\n          }}\n          validationSchema={validationSchema}\n\n          onSubmit={(data, { setSubmitting }) => {\n            setSubmitting(true);\n            // make async call\n            console.log(\"submit: \", data);\n            setSubmitting(false);\n          }}\n        >\n          {({ values, errors, isSubmitting }) => (\n            <Form>\n              <div className='login-container'>\n                <InternationalisedTextField placeholder=\"loginPage.emailPlaceHolder\" name=\"username\" type=\"text\" />\n                <br />\n                <InternationalisedTextField placeholder=\"loginPage.passwordPlaceHolder\" name=\"password\" type=\"password\" />\n                <div>\n                  <Button disabled={isSubmitting} type=\"submit\" color=\"primary\" >\n                    <Translate translationKey='loginPage.loginButton' />\n                  </Button>\n                </div>\n              </div>\n              <hr />\n              <pre>{JSON.stringify(values, null, 2)}</pre>\n              <pre>{JSON.stringify(errors, null, 2)}</pre>\n            </Form>\n          )}\n        </Formik>\n\n      </div>\n    </TranslationProvider>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport './App.css';\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}